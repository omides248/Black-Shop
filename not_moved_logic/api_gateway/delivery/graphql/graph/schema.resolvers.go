package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	pbcatalog "black-shop/api/proto/catalog/v1"
	"black-shop/internal/api_gateway/delivery/graphql/graph/model"
	"context"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.CreateCategoryInput) (*model.Category, error) {
	req := &pbcatalog.CreateCategoryRequest{
		Name: input.Name,
	}

	if input.ImageURL != nil {
		req.ImageUrl = input.ImageURL
	}
	if input.ParentID != nil {
		req.ParentId = input.ParentID
	}

	res, err := r.Resolver.CatalogClient.CreateCategory(ctx, req)
	if err != nil {
		return nil, err
	}

	category := &model.Category{
		ID:       res.Category.Id,
		Name:     res.Category.Name,
		ImageURL: res.Category.ImageUrl,
		ParentID: res.Category.ParentId,
		Depth:    res.Category.Depth,
	}
	return category, nil
}

// ListCategories is the resolver for the listCategories field.
func (r *queryResolver) ListCategories(ctx context.Context, parentID *string) ([]*model.Category, error) {
	req := &pbcatalog.ListCategoriesRequest{}
	if parentID != nil {
		req.ParentId = *parentID
	}
	res, err := r.Resolver.CatalogClient.ListCategories(ctx, req)
	if err != nil {
		return nil, err
	}
	categories := make([]*model.Category, 0, len(res.Categories))
	for _, cat := range res.Categories {
		categories = append(categories, &model.Category{
			ID:       cat.Id,
			Name:     cat.Name,
			ImageURL: cat.ImageUrl,
			ParentID: cat.ParentId,
			Depth:    cat.Depth,
		})
	}
	return categories, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
