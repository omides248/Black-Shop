package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	pbcatalog "black-shop/api/proto/catalog/v1"
	"black-shop/internal/api_gateway/delivery/graphql/graph/model"
	"context"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.CreateCategoryInput) (*model.Category, error) {
	res, err := r.Resolver.CatalogClient.CreateCategory(ctx, &pbcatalog.CreateCategoryRequest{
		Name:     input.Name,
		ImageUrl: input.ImageURL,
		ParentId: input.ParentID,
	})
	if err != nil {
		return nil, err
	}
	category := &model.Category{
		ID:    res.Category.Id,
		Name:  res.Category.Name,
		Depth: res.Category.Depth,
	}

	return category, nil
}

// ListCategories is the resolver for the listCategories field.
func (r *queryResolver) ListCategories(ctx context.Context) ([]*model.Category, error) {
	res, err := r.Resolver.CatalogClient.ListCategories(ctx, &pbcatalog.ListCategoriesRequest{})
	if err != nil {
		return nil, err
	}

	// Create a slice of the GraphQL model type
	categories := make([]*model.Category, 0, len(res.Categories))

	// Iterate over the gRPC response and map each item to the GraphQL model
	for _, cat := range res.Categories {
		categories = append(categories, &model.Category{
			ID:    cat.Id,
			Name:  cat.Name,
			Depth: cat.Depth,
		})
	}

	return categories, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
